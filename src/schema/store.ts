
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface holderConstructorInput {
  id: String;
  balance: BigDecimal;
  stakedaoGaugeBalance?: BigDecimal;
  convexGaugeBalance?: BigDecimal;
  curveGaugeBalance?: BigDecimal;
}
@Entity("holder")
export class holder extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("BigDecimal")
	balance: BigDecimal

	@Column("BigDecimal")
	stakedaoGaugeBalance?: BigDecimal

	@Column("BigDecimal")
	convexGaugeBalance?: BigDecimal

	@Column("BigDecimal")
	curveGaugeBalance?: BigDecimal
  constructor(data: holderConstructorInput) {super()}
  
}


const source = `type holder @entity {
    id: String!
    balance: BigDecimal!
    stakedaoGaugeBalance: BigDecimal
    convexGaugeBalance: BigDecimal
    curveGaugeBalance: BigDecimal
}
`
DatabaseSchema.register({
  source,
  entities: {
    "holder": holder
  }
})
