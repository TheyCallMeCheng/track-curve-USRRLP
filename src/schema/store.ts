
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean, Int8 } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'







interface HolderConstructorInput {
  id: String;
  balance: BigDecimal;
  usdValue?: BigDecimal;
  stakedaoGaugeBalanceID?: ID;
  convexGaugeBalanceID?: ID;
  curveGaugeBalanceID?: ID;
}
@Entity("Holder")
export class Holder extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("BigDecimal")
	balance: BigDecimal

	@Column("BigDecimal")
	usdValue?: BigDecimal

	@One("StakeDaoHolder")
	_stakedaoGaugeBalance: Promise<StakeDaoHolder | undefined>

	stakedaoGaugeBalanceID: ID

	@One("ConvexHolder")
	_convexGaugeBalance: Promise<ConvexHolder | undefined>

	convexGaugeBalanceID: ID

	@One("CurveHolder")
	_curveGaugeBalance: Promise<CurveHolder | undefined>

	curveGaugeBalanceID: ID
  constructor(data: HolderConstructorInput) {super()}
  
  stakedaoGaugeBalance(): Promise<StakeDaoHolder | undefined> {
    return this._stakedaoGaugeBalance
  }

  setStakedaoGaugeBalance(stakedaoGaugeBalance: StakeDaoHolder | undefined) {
    if (stakedaoGaugeBalance) this.stakedaoGaugeBalanceID = stakedaoGaugeBalance.id
  }

  convexGaugeBalance(): Promise<ConvexHolder | undefined> {
    return this._convexGaugeBalance
  }

  setConvexGaugeBalance(convexGaugeBalance: ConvexHolder | undefined) {
    if (convexGaugeBalance) this.convexGaugeBalanceID = convexGaugeBalance.id
  }

  curveGaugeBalance(): Promise<CurveHolder | undefined> {
    return this._curveGaugeBalance
  }

  setCurveGaugeBalance(curveGaugeBalance: CurveHolder | undefined) {
    if (curveGaugeBalance) this.curveGaugeBalanceID = curveGaugeBalance.id
  }
}


interface StakeDaoHolderConstructorInput {
  id: String;
  balance: BigDecimal;
}
@Entity("StakeDaoHolder")
export class StakeDaoHolder extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("BigDecimal")
	balance: BigDecimal
  constructor(data: StakeDaoHolderConstructorInput) {super()}
  
}


interface ConvexHolderConstructorInput {
  id: String;
  balance: BigDecimal;
}
@Entity("ConvexHolder")
export class ConvexHolder extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("BigDecimal")
	balance: BigDecimal
  constructor(data: ConvexHolderConstructorInput) {super()}
  
}


interface CurveHolderConstructorInput {
  id: String;
  balance: BigDecimal;
}
@Entity("CurveHolder")
export class CurveHolder extends AbstractEntity  {

	@Required
	@Column("String")
	id: String

	@Required
	@Column("BigDecimal")
	balance: BigDecimal
  constructor(data: CurveHolderConstructorInput) {super()}
  
}


const source = `type Holder @entity {
    id: String!
    balance: BigDecimal!
    usdValue: BigDecimal
    stakedaoGaugeBalance: StakeDaoHolder
    convexGaugeBalance: ConvexHolder
    curveGaugeBalance: CurveHolder
}

type StakeDaoHolder @entity {
    id: String!
    balance: BigDecimal!
}

type ConvexHolder @entity {
    id: String!
    balance: BigDecimal!
}

type CurveHolder @entity {
    id: String!
    balance: BigDecimal!
}
`
DatabaseSchema.register({
  source,
  entities: {
    "Holder": Holder,
		"StakeDaoHolder": StakeDaoHolder,
		"ConvexHolder": ConvexHolder,
		"CurveHolder": CurveHolder
  }
})
